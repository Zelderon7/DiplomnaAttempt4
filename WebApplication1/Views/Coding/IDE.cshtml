@model WebApplication1.Models.VMs.CodingIDEVM

@{
	Layout = null;
    ViewData["Title"] = Model.Task.Name;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@Model.Task.Name</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs/editor.main.min.css">
    <style>
        body {
            background-color: #1e1e1e;
            color: #d4d4d4;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
        }

        .container {
            display: flex;
            flex: 1;
            padding: 20px;
            gap: 20px;
        }

        .left-panel {
            flex: 1;
            max-width: 30%;
            overflow-y: auto;
        }

        .right-panel {
            flex: 2;
            display: flex;
            flex-direction: column;
        }

        .editor-container {
            flex: 1;
            border: 1px solid #444;
            margin-bottom: 20px;
        }

        .file-tabs {
            display: flex;
            margin-bottom: 10px;
        }

        .file-tab {
            padding: 10px;
            background-color: #2d2d2d;
            color: #d4d4d4;
            cursor: pointer;
            margin-right: 5px;
            border: 1px solid #444;
        }

            .file-tab.active {
                background-color: #1e1e1e;
                border-bottom: 1px solid #1e1e1e;
            }

        .button-container {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

            .button-container button {
                padding: 10px 20px;
                background-color: #007bff;
                color: white;
                border: none;
                cursor: pointer;
                border-radius: 5px;
            }

                .button-container button:hover {
                    background-color: #0056b3;
                }

        .output-container {
            background-color: #2d2d2d;
            border: 1px solid #444;
            padding: 10px;
            color: #d4d4d4;
            margin-top: 20px;
            height: 100px;
            overflow-y: auto;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Left Panel: Title and Description -->
        <div class="left-panel">
            <h1>@Model.Task.Name</h1>
            <p>@Model.Task.Description</p>
        </div>

        <!-- Right Panel: Editor and Buttons -->
        <div class="right-panel">
            <!-- File Tabs -->
            <div class="file-tabs" id="fileTabs">
                @for (int i = 0; i < Model.FilePaths.Length; i++)
                {
                    <div class="file-tab @(i == 0 ? "active" : "")" data-index="@i">@Model.FilePaths[i]</div>
                }
            </div>

            <!-- Monaco Editor -->
            <div class="editor-container" id="editorContainer"></div>

            <!-- Buttons -->
            <div class="button-container">
                <form asp-action="RunCode" method="post">
                    <!-- Hidden fields for CodingTask properties -->
                    <input type="hidden" asp-for="Task.Id" />
                    <input type="hidden" asp-for="Task.Name" />
                    <input type="hidden" asp-for="Task.Description" />
                    <input type="hidden" asp-for="Task.AuthorId" />
                    <input type="hidden" asp-for="Task.Language" />

                    <!-- Hidden field for Folder Directory -->
                    <input type="hidden" asp-for="FolderDir" />

                    <!-- Handling FilePaths (if needed) -->
                    @if (Model.FilePaths != null)
                    {
                        @for (int i = 0; i < Model.FilePaths.Length; i++)
                        {
                            <input type="hidden" asp-for="FilePaths[i]" />
                        }
                    }

                    <button type="submit" id="submitButton">Submit Code</button>
                </form>
                <button id="resetButton">Reset Code</button>
            </div>

            <!-- Output Area -->
            <div class="output-container" id="outputContainer">
                <p>@Model.Output</p>
                <p style="text: red;">@Model.Error</p>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs/loader.min.js"></script>
    <script>
        require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs' }});
        require(['vs/editor/editor.main'], function () {
            const fileContents = @Html.Raw(Json.Serialize(Model.FilePaths.Select(fp => File.ReadAllText(fp)).ToArray()));
            const editors = [];
            const editorContainer = document.getElementById('editorContainer');
            const outputContainer = document.getElementById('outputContainer');
            const submitButton = document.getElementById('submitButton');
            const resetButton = document.getElementById('resetButton');

            function createEditor(index) {
                const editor = monaco.editor.create(editorContainer, {
                    value: fileContents[index],
                    language: 'python',
                    theme: 'vs-dark'
                });
                editors[index] = editor;
            }

            function showEditor(index) {
                editors.forEach((editor, i) => {
                    if (i === index) {
                        editorContainer.innerHTML = '';
                        editor.layout();
                        editorContainer.appendChild(editor.getDomNode());
                    }
                });
            }

            document.querySelectorAll('.file-tab').forEach((tab, index) => {
                tab.addEventListener('click', () => {
                    document.querySelectorAll('.file-tab').forEach(t => t.classList.remove('active'));
                    tab.classList.add('active');
                    if (!editors[index]) {
                        createEditor(index);
                    }
                    showEditor(index);
                });
            });

            // Initialize the first editor
            createEditor(0);

            // Submit Button Click Handler
            submitButton.addEventListener('click', () => {
                const activeTab = document.querySelector('.file-tab.active');
                const activeIndex = activeTab ? parseInt(activeTab.getAttribute('data-index')) : 0;
                const code = editors[activeIndex].getValue();

                // Simulate output (replace with actual API call or logic)
                outputContainer.innerHTML = `<p>Submitted code for ${Model.FilePaths[activeIndex]}:</p><pre>${code}</pre>`;
            });

            // Reset Button Click Handler
            resetButton.addEventListener('click', () => {
                const activeTab = document.querySelector('.file-tab.active');
                const activeIndex = activeTab ? parseInt(activeTab.getAttribute('data-index')) : 0;
                editors[activeIndex].setValue(fileContents[activeIndex]);
                outputContainer.innerHTML = `<p>Code reset to initial state.</p>`;
            });
        });
    </script>
</body>
</html>